{
	"info": {
		"_postman_id": "be9915f2-4108-469e-a960-3e0f1cf12268",
		"name": "local-kms",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create a test key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"// Parsing the response returned by the request.",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"There is a KeyMetadata key\", function () {",
									"    pm.expect(jsonData).to.have.property('KeyMetadata');",
									"});",
									"",
									"pm.test(\"The KeyMetadata looks sensible\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData['KeyMetadata'])).to.have.lengthOf.at.least(9);",
									"    ",
									"    pm.expect(jsonData.KeyMetadata).to.have.property('AWSAccountId');",
									"    pm.expect(jsonData.KeyMetadata).to.have.property('Arn');",
									"    pm.expect(jsonData.KeyMetadata).to.have.property('CreationDate');",
									"    pm.expect(jsonData.KeyMetadata).to.have.property('Enabled');",
									"    pm.expect(jsonData.KeyMetadata).to.have.property('KeyId');",
									"    pm.expect(jsonData.KeyMetadata).to.have.property('KeyManager');",
									"    pm.expect(jsonData.KeyMetadata).to.have.property('KeyState');",
									"    pm.expect(jsonData.KeyMetadata).to.have.property('KeyUsage');",
									"    pm.expect(jsonData.KeyMetadata).to.have.property('Origin');",
									"});",
									"",
									"pm.environment.set(\"test_key\", jsonData.KeyMetadata.KeyId);",
									"pm.environment.set(\"test_key_arn\", jsonData.KeyMetadata.Arn);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"value": "TrentService.CreateKey",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-amz-json-1.1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create alias for testing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.CreateAlias"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"AliasName\": \"{{test_alias}}\",\n   \"TargetKeyId\": \"{{test_key}}\"\n}"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Encrypt",
			"item": [
				{
					"name": "Successful Encrypt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"// Parsing the response returned by the request.",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"The response looks sensible\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(2);",
									"    ",
									"    pm.expect(jsonData).to.have.property('KeyId');",
									"    pm.expect(jsonData).to.have.property('CiphertextBlob');",
									"    ",
									"    pm.environment.set(\"ciphertext\", jsonData.CiphertextBlob);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									"//console.log('Encrypting ' + pm.test_encryption_string)",
									"",
									"test_encryption_string = pm.globals.get('test_encryption_string')",
									"",
									"//var encoded_plaintext = CryptoJS.enc.Base64.parse(pm.test_encryption_string);",
									"var words = CryptoJS.enc.Utf8.parse(test_encryption_string);",
									"var encoded_plaintext = CryptoJS.enc.Base64.stringify(words);",
									"    ",
									"pm.environment.set(\"encoded_plaintext\", encoded_plaintext);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Encrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"KeyId\": \"{{test_alias}}\",\n   \"Plaintext\": \"{{encoded_plaintext}}\"\n}"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty Plaintext",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check expected error returned\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(2);",
									"    ",
									"    pm.expect(jsonData).to.have.property('__type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    ",
									"    pm.expect(jsonData['__type']).to.equal('ValidationException')",
									"    pm.expect(jsonData['message']).to.equal(\"1 validation error detected: Value at 'plaintext' failed to satisfy constraint: Member must have length greater than or equal to 1\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									"//console.log('Encrypting ' + pm.test_encryption_string)",
									"",
									"test_encryption_string = pm.globals.get('test_encryption_string')",
									"",
									"//var encoded_plaintext = CryptoJS.enc.Base64.parse(pm.test_encryption_string);",
									"var words = CryptoJS.enc.Utf8.parse(test_encryption_string);",
									"var encoded_plaintext = CryptoJS.enc.Base64.stringify(words);",
									"    ",
									"pm.environment.set(\"encoded_plaintext\", encoded_plaintext);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Encrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"KeyId\": \"{{test_alias}}\",\n   \"Plaintext\": \"\"\n}"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check expected error returned\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(2);",
									"    ",
									"    pm.expect(jsonData).to.have.property('__type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    ",
									"    pm.expect(jsonData['__type']).to.equal('NotFoundException')",
									"    pm.expect(jsonData['message']).to.match(/^Key 'arn:aws:kms:[\\w-]+:[\\d]+:key\\/[\\da-f-]+' does not exist$/)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									"//console.log('Encrypting ' + pm.test_encryption_string)",
									"",
									"test_encryption_string = pm.globals.get('test_encryption_string')",
									"",
									"//var encoded_plaintext = CryptoJS.enc.Base64.parse(pm.test_encryption_string);",
									"var words = CryptoJS.enc.Utf8.parse(test_encryption_string);",
									"var encoded_plaintext = CryptoJS.enc.Base64.stringify(words);",
									"    ",
									"pm.environment.set(\"encoded_plaintext\", encoded_plaintext);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Encrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"KeyId\": \"d90514a3-5d0f-4bcf-b938-97dfa67ba0a3\",\n   \"Plaintext\": \"{{encoded_plaintext}}\"\n}"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid alias",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check expected error returned\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(2);",
									"    ",
									"    pm.expect(jsonData).to.have.property('__type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    ",
									"    pm.expect(jsonData['__type']).to.equal('NotFoundException')",
									"    pm.expect(jsonData['message']).to.match(/^Alias arn:aws:kms:[\\w-]+:[\\d]+:alias\\/[a-zA-Z0-9:/_-]+ is not found.$/)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									"//console.log('Encrypting ' + pm.test_encryption_string)",
									"",
									"test_encryption_string = pm.globals.get('test_encryption_string')",
									"",
									"//var encoded_plaintext = CryptoJS.enc.Base64.parse(pm.test_encryption_string);",
									"var words = CryptoJS.enc.Utf8.parse(test_encryption_string);",
									"var encoded_plaintext = CryptoJS.enc.Base64.stringify(words);",
									"    ",
									"pm.environment.set(\"encoded_plaintext\", encoded_plaintext);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Encrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"KeyId\": \"alias/does-not-exist\",\n   \"Plaintext\": \"{{encoded_plaintext}}\"\n}"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Decrypt",
			"item": [
				{
					"name": "Successful Decrypt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check we have expected fields\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf.at.least(2);",
									"    ",
									"    pm.expect(jsonData).to.have.property('KeyId');",
									"    pm.expect(jsonData).to.have.property('Plaintext');",
									"});",
									"",
									"pm.test(\"Check message matches what we expect\", function () {",
									"",
									"    var words = CryptoJS.enc.Base64.parse(jsonData.Plaintext);",
									"    var textString = CryptoJS.enc.Utf8.stringify(words);",
									"    ",
									"    console.log('Returned message ' + textString)",
									"",
									"    pm.expect(textString).to.equal(pm.globals.get('test_encryption_string'))",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Decrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"CiphertextBlob\": \"{{ciphertext}}\"\n}\n"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ciphertext for missing key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check expected error returned\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(2);",
									"    ",
									"    pm.expect(jsonData).to.have.property('__type');",
									"    pm.expect(jsonData).to.have.property('Message');",
									"    ",
									"    pm.expect(jsonData['__type']).to.equal('AccessDeniedException')",
									"    pm.expect(jsonData['Message']).to.equal('The ciphertext refers to a customer master key that does not exist, does not exist in this region, or you are not allowed to access.')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Decrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"CiphertextBlob\": \"{{invalid_ciphertext}}\"\n}\n"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						},
						"description": "Ciphertext is valid but relates to a key not accessable to the calling user."
					},
					"response": []
				},
				{
					"name": "Ciphertext not base64",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check expected error returned\", function () {",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(1);",
									"    pm.expect(jsonData).to.have.property('__type');",
									"        pm.expect(jsonData['__type']).to.equal('SerializationException')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Decrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"CiphertextBlob\": \"this-is-not-base64\"\n}\n"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Corrupt Ciphertext",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check expected error returned\", function () {",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(1);",
									"    pm.expect(jsonData).to.have.property('__type');",
									"    pm.expect(jsonData['__type']).to.equal('InvalidCiphertextException')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Decrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"CiphertextBlob\": \"bm90LWEtdmFsaWQtbWVzc2FnZQ==\"\n}\n"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						},
						"description": "Ciphertext is base64, but otherwise is nonsense."
					},
					"response": []
				},
				{
					"name": "Empty Ciphertext",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check expected error returned\", function () {",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(2);",
									"    ",
									"    pm.expect(jsonData).to.have.property('__type');",
									"     pm.expect(jsonData).to.have.property('message');",
									"    ",
									"    pm.expect(jsonData['__type']).to.equal('ValidationException')",
									"    ",
									"    pm.expect(jsonData['message']).to.equal(\"1 validation error detected: Value 'java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]' at 'ciphertextBlob' failed to satisfy constraint: Member must have length greater than or equal to 1\")",
									"    ",
									"    // Message currently has an odd error response. See: https://forums.aws.amazon.com/thread.jspa?threadID=302054&tstart=0",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Decrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"CiphertextBlob\": \"\"\n}\n"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ReEncrypt",
			"item": [
				{
					"name": "Successful ReEncrypt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check we have expected fields\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf.at.least(3);",
									"    ",
									"    pm.expect(jsonData).to.have.property('KeyId');",
									"    pm.expect(jsonData).to.have.property('SourceKeyId');",
									"    pm.expect(jsonData).to.have.property('CiphertextBlob');",
									"    ",
									"    pm.environment.set(\"ciphertext\", jsonData.CiphertextBlob);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.ReEncrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"CiphertextBlob\": \"{{ciphertext}}\",\n   \"DestinationKeyId\": \"{{test_key}}\"\n}\n"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successful [still] Decrypt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check we have expected fields\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf.at.least(2);",
									"    ",
									"    pm.expect(jsonData).to.have.property('KeyId');",
									"    pm.expect(jsonData).to.have.property('Plaintext');",
									"});",
									"",
									"pm.test(\"Check message matches what we expect\", function () {",
									"",
									"    var words = CryptoJS.enc.Base64.parse(jsonData.Plaintext);",
									"    var textString = CryptoJS.enc.Utf8.stringify(words);",
									"    ",
									"    console.log('Returned message ' + textString)",
									"",
									"    pm.expect(textString).to.equal(pm.globals.get('test_encryption_string'))",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Decrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"CiphertextBlob\": \"{{ciphertext}}\"\n}\n"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successful ReEncrypt with Context",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check we have expected fields\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf.at.least(3);",
									"    ",
									"    pm.expect(jsonData).to.have.property('KeyId');",
									"    pm.expect(jsonData).to.have.property('SourceKeyId');",
									"    pm.expect(jsonData).to.have.property('CiphertextBlob');",
									"    ",
									"    pm.environment.set(\"ciphertext\", jsonData.CiphertextBlob);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.ReEncrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"CiphertextBlob\": \"{{ciphertext}}\",\n   \"DestinationKeyId\": \"{{test_key}}\",\n   \"DestinationEncryptionContext\": { \n      \"a\" : \"b\",\n      \"b\" : \"v\",\n      \"c\" : \"c\",\n      \"d\" : \"x\",\n      \"e\" : \"z\"\n   }\n}\n"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail [still] Decrypt with Contex",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check expected error returned\", function () {",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(1);",
									"    pm.expect(jsonData).to.have.property('__type');",
									"        pm.expect(jsonData['__type']).to.equal('InvalidCiphertextException')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Decrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"CiphertextBlob\": \"{{ciphertext}}\"\n}\n"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successful [still] Decrypt with Context",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check we have expected fields\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf.at.least(2);",
									"    ",
									"    pm.expect(jsonData).to.have.property('KeyId');",
									"    pm.expect(jsonData).to.have.property('Plaintext');",
									"});",
									"",
									"pm.test(\"Check message matches what we expect\", function () {",
									"",
									"    var words = CryptoJS.enc.Base64.parse(jsonData.Plaintext);",
									"    var textString = CryptoJS.enc.Utf8.stringify(words);",
									"    ",
									"    console.log('Returned message ' + textString)",
									"",
									"    pm.expect(textString).to.equal(pm.globals.get('test_encryption_string'))",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Decrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"CiphertextBlob\": \"{{ciphertext}}\",\n   \"EncryptionContext\": { \n      \"a\" : \"b\",\n      \"b\" : \"v\",\n      \"c\" : \"c\",\n      \"d\" : \"x\",\n      \"e\" : \"z\"\n   }\n}\n"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Encrypt with Context",
			"item": [
				{
					"name": "Successful Encrypt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"// Parsing the response returned by the request.",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.environment.set(\"ciphertext_with_context\", jsonData.CiphertextBlob);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"The KeyMetadata looks sensible\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(2);",
									"    ",
									"    pm.expect(jsonData).to.have.property('KeyId');",
									"    pm.expect(jsonData).to.have.property('CiphertextBlob');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									"//console.log('Encrypting ' + pm.test_encryption_string)",
									"",
									"test_encryption_string = pm.globals.get('test_encryption_string')",
									"",
									"//var encoded_plaintext = CryptoJS.enc.Base64.parse(pm.test_encryption_string);",
									"var words = CryptoJS.enc.Utf8.parse(test_encryption_string);",
									"var encoded_plaintext = CryptoJS.enc.Base64.stringify(words);",
									"    ",
									"pm.environment.set(\"encoded_plaintext\", encoded_plaintext);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Encrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"KeyId\": \"{{test_alias}}\",\n   \"Plaintext\": \"{{encoded_plaintext}}\",\n   \"EncryptionContext\": { \n      \"a\" : \"1\",\n      \"b\" : \"2\",\n      \"c\" : \"3\",\n      \"d\" : \"4\",\n      \"e\" : \"5\"\n   }\n}"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail Decrypt due to lack of context",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check expected error returned\", function () {",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(1);",
									"    pm.expect(jsonData).to.have.property('__type');",
									"        pm.expect(jsonData['__type']).to.equal('InvalidCiphertextException')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Decrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"CiphertextBlob\": \"{{ciphertext_with_context}}\"\n}\n"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successful Decrypt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check we have expected fields\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf.at.least(2);",
									"    ",
									"    pm.expect(jsonData).to.have.property('KeyId');",
									"    pm.expect(jsonData).to.have.property('Plaintext');",
									"});",
									"",
									"pm.test(\"Check message matches what we expect\", function () {",
									"",
									"    var words = CryptoJS.enc.Base64.parse(jsonData.Plaintext);",
									"    var textString = CryptoJS.enc.Utf8.stringify(words);",
									"    ",
									"    console.log('Returned message ' + textString)",
									"",
									"    pm.expect(textString).to.equal(pm.globals.get('test_encryption_string'))",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Decrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"CiphertextBlob\": \"{{ciphertext_with_context}}\",\n   \"EncryptionContext\": { \n      \"e\" : \"5\",\n      \"a\" : \"1\",\n      \"b\" : \"2\",\n      \"c\" : \"3\",\n      \"d\" : \"4\"\n   }\n}\n"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Data Keys",
			"item": [
				{
					"name": "Generate Data Key (KeySpec)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"// Parsing the response returned by the request.",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"The response looks sensible\", function () {",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(3);",
									"    ",
									"    pm.expect(jsonData).to.have.property('KeyId');",
									"    pm.expect(jsonData).to.have.property('Plaintext');",
									"    pm.expect(jsonData).to.have.property('CiphertextBlob');",
									"    ",
									"    pm.environment.set(\"ciphertext_datakey\", jsonData.CiphertextBlob);",
									"    pm.environment.set(\"plaintext_datakey\", jsonData.Plaintext);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									"//console.log('Encrypting ' + pm.test_encryption_string)",
									"",
									"test_encryption_string = pm.globals.get('test_encryption_string')",
									"",
									"//var encoded_plaintext = CryptoJS.enc.Base64.parse(pm.test_encryption_string);",
									"var words = CryptoJS.enc.Utf8.parse(test_encryption_string);",
									"var encoded_plaintext = CryptoJS.enc.Base64.stringify(words);",
									"    ",
									"pm.environment.set(\"encoded_plaintext\", encoded_plaintext);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.GenerateDataKey"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"KeyId\": \"{{test_alias}}\",\n   \"KeySpec\": \"AES_256\"\n}"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decrypt Date Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check we have expected fields\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf.at.least(2);",
									"    ",
									"    pm.expect(jsonData).to.have.property('KeyId');",
									"    pm.expect(jsonData).to.have.property('Plaintext');",
									"});",
									"",
									"pm.test(\"Check message matches what we expect\", function () {",
									"    pm.expect(jsonData.Plaintext).to.equal(pm.environment.get('plaintext_datakey'))",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Decrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"CiphertextBlob\": \"{{ciphertext_datakey}}\"\n}\n"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Data Key Bits & Context",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"// Parsing the response returned by the request.",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"The response looks sensible\", function () {",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(3);",
									"    ",
									"    pm.expect(jsonData).to.have.property('KeyId');",
									"    pm.expect(jsonData).to.have.property('Plaintext');",
									"    pm.expect(jsonData).to.have.property('CiphertextBlob');",
									"    ",
									"    pm.environment.set(\"ciphertext_datakey\", jsonData.CiphertextBlob);",
									"    pm.environment.set(\"plaintext_datakey\", jsonData.Plaintext);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									"//console.log('Encrypting ' + pm.test_encryption_string)",
									"",
									"test_encryption_string = pm.globals.get('test_encryption_string')",
									"",
									"//var encoded_plaintext = CryptoJS.enc.Base64.parse(pm.test_encryption_string);",
									"var words = CryptoJS.enc.Utf8.parse(test_encryption_string);",
									"var encoded_plaintext = CryptoJS.enc.Base64.stringify(words);",
									"    ",
									"pm.environment.set(\"encoded_plaintext\", encoded_plaintext);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.GenerateDataKey"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"KeyId\": \"{{test_alias}}\",\n   \"NumberOfBytes\": 3,\n   \"EncryptionContext\": { \n      \"a\" : \"!\",\n      \"b\" : \"@\",\n      \"c\" : \"£\",\n      \"d\" : \"$\",\n      \"e\" : \"%\"\n   }\n}"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decrypt Date without Context",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check expected error returned\", function () {",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(1);",
									"    pm.expect(jsonData).to.have.property('__type');",
									"        pm.expect(jsonData['__type']).to.equal('InvalidCiphertextException')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Decrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"CiphertextBlob\": \"{{ciphertext_datakey}}\"\n}\n"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decrypt Date with Context",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check we have expected fields\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf.at.least(2);",
									"    ",
									"    pm.expect(jsonData).to.have.property('KeyId');",
									"    pm.expect(jsonData).to.have.property('Plaintext');",
									"});",
									"",
									"pm.test(\"Check message matches what we expect\", function () {",
									"    pm.expect(jsonData.Plaintext).to.equal(pm.environment.get('plaintext_datakey'))",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.Decrypt"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"CiphertextBlob\": \"{{ciphertext_datakey}}\",\n   \"EncryptionContext\": { \n      \"a\" : \"!\",\n      \"b\" : \"@\",\n      \"c\" : \"£\",\n      \"d\" : \"$\",\n      \"e\" : \"%\"\n   }\n}\n"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Data Key Sans Plaintext",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"// Parsing the response returned by the request.",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"The response looks sensible\", function () {",
									"    // Should have exactly 2. i.e. no Plaintext field",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(2);",
									"    ",
									"    pm.expect(jsonData).to.have.property('KeyId');",
									"    pm.expect(jsonData).to.have.property('CiphertextBlob');",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									"//console.log('Encrypting ' + pm.test_encryption_string)",
									"",
									"test_encryption_string = pm.globals.get('test_encryption_string')",
									"",
									"//var encoded_plaintext = CryptoJS.enc.Base64.parse(pm.test_encryption_string);",
									"var words = CryptoJS.enc.Utf8.parse(test_encryption_string);",
									"var encoded_plaintext = CryptoJS.enc.Base64.stringify(words);",
									"    ",
									"pm.environment.set(\"encoded_plaintext\", encoded_plaintext);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.GenerateDataKeyWithoutPlaintext"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"KeyId\": \"{{test_alias}}\",\n   \"KeySpec\": \"AES_256\"\n}"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0c48c963-5708-4253-a111-e34cd562f2d7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bb7d8809-470f-4560-934f-bbe8e5905cdb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Random Data",
			"item": [
				{
					"name": "Generate a little Random Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"// Parsing the response returned by the request.",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"The response looks sensible\", function () {",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(1);",
									"    pm.expect(jsonData).to.have.property('Plaintext');",
									"});",
									"",
									"pm.test(\"The response is the correct length\", function () {",
									"    var words = CryptoJS.enc.Base64.parse(jsonData.Plaintext);",
									"    ",
									"    // 8 bytes equals 16 characters",
									"    pm.expect(words.toString().length).to.eql(16);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									"//console.log('Encrypting ' + pm.test_encryption_string)",
									"",
									"test_encryption_string = pm.globals.get('test_encryption_string')",
									"",
									"//var encoded_plaintext = CryptoJS.enc.Base64.parse(pm.test_encryption_string);",
									"var words = CryptoJS.enc.Utf8.parse(test_encryption_string);",
									"var encoded_plaintext = CryptoJS.enc.Base64.stringify(words);",
									"    ",
									"pm.environment.set(\"encoded_plaintext\", encoded_plaintext);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.GenerateRandom"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"NumberOfBytes\": 8\n}"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate a lot of Random Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"// Parsing the response returned by the request.",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"The response looks sensible\", function () {",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(1);",
									"    pm.expect(jsonData).to.have.property('Plaintext');",
									"});",
									"",
									"pm.test(\"The response is the correct length\", function () {",
									"    var words = CryptoJS.enc.Base64.parse(jsonData.Plaintext);",
									"    ",
									"    // 1024 bytes equals 2048 characters",
									"    pm.expect(words.toString().length).to.eql(2048);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									"//console.log('Encrypting ' + pm.test_encryption_string)",
									"",
									"test_encryption_string = pm.globals.get('test_encryption_string')",
									"",
									"//var encoded_plaintext = CryptoJS.enc.Base64.parse(pm.test_encryption_string);",
									"var words = CryptoJS.enc.Utf8.parse(test_encryption_string);",
									"var encoded_plaintext = CryptoJS.enc.Base64.stringify(words);",
									"    ",
									"pm.environment.set(\"encoded_plaintext\", encoded_plaintext);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.GenerateRandom"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"NumberOfBytes\": 1024\n}"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate too much data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"// Parsing the response returned by the request.",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check expected error returned\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(2);",
									"    ",
									"    pm.expect(jsonData).to.have.property('__type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    ",
									"    pm.expect(jsonData['__type']).to.equal('ValidationException')",
									"    pm.expect(jsonData['message']).to.equal(\"1 validation error detected: Value '1025' at 'numberOfBytes' failed to satisfy constraint: Member must have value less than or equal to 1024\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									"//console.log('Encrypting ' + pm.test_encryption_string)",
									"",
									"test_encryption_string = pm.globals.get('test_encryption_string')",
									"",
									"//var encoded_plaintext = CryptoJS.enc.Base64.parse(pm.test_encryption_string);",
									"var words = CryptoJS.enc.Utf8.parse(test_encryption_string);",
									"var encoded_plaintext = CryptoJS.enc.Base64.stringify(words);",
									"    ",
									"pm.environment.set(\"encoded_plaintext\", encoded_plaintext);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.GenerateRandom"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"NumberOfBytes\": 1025\n}"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NumberOfBytes Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"// Parsing the response returned by the request.",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check expected error returned\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(2);",
									"    ",
									"    pm.expect(jsonData).to.have.property('__type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    ",
									"    pm.expect(jsonData['__type']).to.equal('ValidationException')",
									"    pm.expect(jsonData['message']).to.equal(\"Please specify either number of bytes or key spec.\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									"//console.log('Encrypting ' + pm.test_encryption_string)",
									"",
									"test_encryption_string = pm.globals.get('test_encryption_string')",
									"",
									"//var encoded_plaintext = CryptoJS.enc.Base64.parse(pm.test_encryption_string);",
									"var words = CryptoJS.enc.Utf8.parse(test_encryption_string);",
									"var encoded_plaintext = CryptoJS.enc.Base64.stringify(words);",
									"    ",
									"pm.environment.set(\"encoded_plaintext\", encoded_plaintext);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.GenerateRandom"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n}"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ask for no data Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3d4579-a1b5-4b65-8ec6-abee70f7cdf5",
								"exec": [
									"// Parsing the response returned by the request.",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check expected error returned\", function () {",
									"    // AWS do add fields, so keep this as a minimum number for now",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(2);",
									"    ",
									"    pm.expect(jsonData).to.have.property('__type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    ",
									"    pm.expect(jsonData['__type']).to.equal('ValidationException')",
									"    pm.expect(jsonData['message']).to.equal(\"1 validation error detected: Value '0' at 'numberOfBytes' failed to satisfy constraint: Member must have value greater than or equal to 1\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7d1da28-b568-4a32-8054-9495847765f2",
								"exec": [
									"//console.log('Encrypting ' + pm.test_encryption_string)",
									"",
									"test_encryption_string = pm.globals.get('test_encryption_string')",
									"",
									"//var encoded_plaintext = CryptoJS.enc.Base64.parse(pm.test_encryption_string);",
									"var words = CryptoJS.enc.Utf8.parse(test_encryption_string);",
									"var encoded_plaintext = CryptoJS.enc.Base64.stringify(words);",
									"    ",
									"pm.environment.set(\"encoded_plaintext\", encoded_plaintext);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.GenerateRandom"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"NumberOfBytes\": 0\n}"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Teardown",
			"item": [
				{
					"name": "Delete test alias",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94650e28-e0c2-44bc-b8ad-e2e7d8505488",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.DeleteAlias"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"AliasName\": \"{{test_alias}}\"\n}"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Schedule test key deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "149ed564-2480-4230-923b-2e0ab3cb45c9",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check we have the expected properties\", function () {",
									"    pm.expect(jsonData).to.have.property('KeyId');",
									"    pm.expect(jsonData).to.have.property('DeletionDate');",
									"});",
									"",
									"pm.test(\"Check we have correct ARN\", function () {",
									"    pm.expect(jsonData.KeyId).to.equal(pm.environment.get(\"test_key_arn\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"type": "text",
								"value": "TrentService.ScheduleKeyDeletion"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-amz-json-1.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"KeyId\": \"{{test_key}}\",\n   \"PendingWindowInDays\": 7\n}\n"
						},
						"url": {
							"raw": "{{Host}}",
							"host": [
								"{{Host}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "awsv4",
		"awsv4": [
			{
				"key": "service",
				"value": "kms",
				"type": "string"
			},
			{
				"key": "region",
				"value": "eu-west-2",
				"type": "string"
			},
			{
				"key": "secretKey",
				"value": "{{aws_secret_access_key}}",
				"type": "string"
			},
			{
				"key": "accessKey",
				"value": "{{aws_access_key_id}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6dcb2009-ac25-4e84-b982-dc9e23bc4ef3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4d71fe37-deb5-4177-9539-b406301fd512",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}